name: bonyan-v2

services:
  postgresdb:
    container_name: postgres
    hostname: postgres
    image: postgres:16
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./bonyan_backend/.env
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER} -d ${DATABASE_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 5

  api:
    container_name: api
    hostname: api
    build:
      context: ./bonyan_backend
      dockerfile: api.Dockerfile
    env_file:
      - ./bonyan_backend/.env
    depends_on:
      postgresdb:
        condition: service_healthy
    command: bash -c "python manage.py makemigrations && python manage.py migrate && gunicorn project.wsgi --bind 0.0.0.0:8000 --reload"
    # command: bash -c "python manage.py makemigrations && python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
    networks:
      - backend

  dockerized_terminal:
    container_name: dockerized_terminal
    hostname: dockerized_terminal
    build:
      context: ./dockerized_terminal
      dockerfile: term.Dockerfile
    command: gunicorn --worker-class eventlet -w 1 app:app --bind 0.0.0.0:5000
    # command: python app.py
    environment:
      - DOCKER_HOST=tcp://host.docker.internal:2375
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - backend

  bonyan_static:
    container_name: bonyan_static
    hostname: bonyan_static
    build:
      context: ./bonyan_static
      dockerfile: static.Dockerfile
    command: gunicorn run:app --bind 0.0.0.0:8080
    # command: python run.py
    networks:
      - backend

  nginx:
    container_name: nginx
    hostname: nginx
    image: nginx:latest
    ports:
      - "80:80"  # Expose only nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api
      - dockerized_terminal
      - bonyan_static
    networks:
      - frontend
      - backend

volumes:
  static_data: {}
  postgres_data: {}

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
